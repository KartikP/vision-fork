name: Perform layer mapping


# Triggered by web_submission PRs that contain changes to models, and manual GitHub label 'trigger-mapping'

on:
  pull_request_target:
    branches:
      - master
    types: [opened, synchronize, reopened, labeled]

jobs:
  # Trigger Layer Mapping only on web_submissions OR if trigger-mapping label is added to PR
  trigger_layer_mapping:
    name: Trigger Layer Mapping
    runs-on: ubuntu-latest
    if: |
      (
        (
          startsWith(github.head_ref, 'web_submission_') &&
          endsWith(github.head_ref, '/add_plugins')
        )
        || contains(github.event.pull_request.labels.*.name, 'trigger-mapping')
      )
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}  # Ensure we are checking out the PR source branch
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools
          python -m pip install ".[test]"

      - name: Get Changed Files
        id: changed_files
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ github.event.number }};
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              per_page: 100,
            });
            const changedFiles = files.map(f => f.filename).join(' ');
            core.setOutput('files', changedFiles);

      - name: Set CHANGED_FILES
        run: |
          echo "CHANGED_FILES=${{ steps.changed_files.outputs.files }}" >> $GITHUB_ENV

      - name: Get plugin info
        id: getplugininfo
        run: |
          set -e
          # Execute the Python script and capture the JSON output
          PLUGIN_INFO=$(python -c "from brainscore_core.plugin_management.parse_plugin_changes import get_scoring_info; get_scoring_info('${{ env.CHANGED_FILES }}', 'brainscore_vision')")
          # Set the output correctly without extra quotes
          echo "PLUGIN_INFO=$PLUGIN_INFO" >> $GITHUB_OUTPUT
          # Debug output to verify
          echo "PLUGIN_INFO is $PLUGIN_INFO"
      
      - name: Check if layer mapping needed
        id: mappingneeded
        run: |
          RUN_SCORING=$(echo '${{ steps.getplugininfo.outputs.PLUGIN_INFO }}' | jq -r '.run_score')
          echo "RUN_SCORING=$RUN_SCORING" >> $GITHUB_OUTPUT
          echo "RUN_SCORING is $RUN_SCORING"

      - name: Extract new_models and pr_number
        run: |
          set -e
          PLUGIN_INFO="${PLUGIN_INFO}"
          NEW_MODELS=$(echo '${{ steps.getplugininfo.outputs.PLUGIN_INFO }}' | jq -r '.new_models')
          PR_NUMBER="${{ github.event.number }}"
          echo "NEW_MODELS=$NEW_MODELS"
          echo "PR_NUMBER=$PR_NUMBER"
          echo "NEW_MODELS=$NEW_MODELS" >> $GITHUB_ENV
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

      - name: Trigger Jenkins
        env:
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_USER_API: ${{ secrets.JENKINS_USER_API }}
          JENKINS_TOKEN: ${{ secrets.JENKINS_MAPPING_TOKEN }}
          JENKINS_TRIGGER: ${{ secrets.JENKINS_MAPPING_URL }}
          NEW_MODELS: ${{ env.NEW_MODELS }}
          SOURCE_REPO: ${{ github.event.pull_request.head.repo.clone_url }}
          SOURCE_BRANCH: ${{ github.head_ref }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
        run: |
          if [[ -z "$JENKINS_TRIGGER" || -z "$JENKINS_USER" || -z "$JENKINS_USER_API" || -z "$JENKINS_TOKEN" ]]; then
            echo "One or more Jenkins environment variables are empty. Aborting."
            exit 1
          fi
      
          curl -X POST "$JENKINS_TRIGGER" \
            --user "$JENKINS_USER:$JENKINS_USER_API" \
            --data-urlencode "NEW_MODELS=$NEW_MODELS" \
            --data-urlencode "PR_NUMBER=$PR_NUMBER" \
            --data-urlencode "SOURCE_REPO=$SOURCE_REPO" \
            --data-urlencode "SOURCE_BRANCH=$SOURCE_BRANCH" \
            --data-urlencode "TOKEN=$JENKINS_TOKEN"

      - name: Debug Jenkins Variables
        run: |
          echo "JENKINS_TRIGGER: $JENKINS_TRIGGER"
          echo "JENKINS_USER: $JENKINS_USER"
          echo "JENKINS_USER_API: $JENKINS_USER_API"
          echo "JENKINS_TOKEN: $JENKINS_TOKEN"
          echo "NEW_MODELS: $NEW_MODELS"
          echo "PR_NUMBER: $PR_NUMBER"
