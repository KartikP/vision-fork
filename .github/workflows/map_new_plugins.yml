name: Perform layer mapping


# Triggered by web_submission PRs that contain changes to models, and manual GitHub label 'trigger-mapping'

on:
  pull_request_target:
    branches:
      - master
    types: [opened, synchronize, reopened, labeled]

jobs:
  # Trigger Layer Mapping only on web_submissions OR if trigger-mapping label is added to PR
  trigger_layer_mapping:
    name: Trigger Layer Mapping
    runs-on: ubuntu-latest
    if: |
      (
        (
          startsWith(github.head_ref, 'web_submission_') &&
          endsWith(github.head_ref, '/add_plugins')
        )
        || contains(github.event.pull_request.labels.*.name, 'trigger-mapping')
      )
    steps:
      # Check if Plugins Unit test has passed
      - name: Wait for plugin unit test checks
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: 'Brain-Score Plugins Unit tests (AWS Jenkins, AWS Execution)'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 5

      - name: Wait for non-plugin unit test checks
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: 'Brain-Score Plugins Unit tests (AWS Jenkins, AWS Execution)'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 5

      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools
          python -m pip install ".[test]"

      - name: Save changed files to env var
        run: |
          git fetch origin refs/pull/${{ github.event.number }}/head
          MERGE_COMMIT=$(git log --format='%H %P' --all | grep "$(git rev-parse FETCH_HEAD)\$" | cut -f1 -d' ')
          echo "CHANGED_FILES=$(git diff --name-only origin/master~1 $MERGE_COMMIT | tr '\n' ' ')"  >> $GITHUB_ENV

      - name: Get plugin info
        id: getplugininfo
        run: |
          echo "PLUGIN_INFO='$(python -c 'from brainscore_core.plugin_management.parse_plugin_changes import get_scoring_info; get_scoring_info("${{ env.CHANGED_FILES }}", "brainscore_vision")')'"  >> $GITHUB_OUTPUT

      - name: Check if layer mapping needed
        id: mappingneeded
        run: |
         echo "RUN_SCORING=$(jq -r '.run_score' <<< ${{ steps.getpluginfo.outputs.PLUGIN_INFO }})" >> $GITHUB_OUTPUT 

      - name: Check for automerge-web label
        id: check_label
        run: |
          LABELS_JSON="${{ toJSON(github.event.pull_request.labels.*.name) }}"
          if echo "$LABELS_JSON" | grep -q "automerge-web"; then
            echo "has_automerge_web=true" >> $GITHUB_ENV
          else
            echo "has_automerge_web=false" >> $GITHUB_ENV
          fi

      - name: Update PLUGIN_INFO based on label
        run: |
          if [[ "$has_automerge_web" == "true" ]]; then
            BS_UID="$(echo '${{ github.event.pull_request.title }}' | sed -E 's/.*\(user:([^)]+)\).*/\1/')"
            BS_PUBLIC="$(echo '${{ github.event.pull_request.title }}' | sed -E 's/.*\(public:([^)]+)\).*/\1/')"
            PLUGIN_INFO=$(echo ${{ steps.getplugininfo.outputs.PLUGIN_INFO }} | tr -d "'" | jq -c ". + {user_id: \"$BS_UID\", public: \"$BS_PUBLIC\"}")
          else
            PLUGIN_INFO=$(echo ${{ steps.getplugininfo.outputs.PLUGIN_INFO }} | tr -d "'")
          fi
          
          # Add pr_number to PLUGIN_INFO
          PR_NUMBER="${{ github.event.number }}"
          PLUGIN_INFO=$(echo "$PLUGIN_INFO" | jq -c ". + {pr_number: \"$PR_NUMBER\"}")
          
          echo "PLUGIN_INFO=${PLUGIN_INFO}" >> $GITHUB_ENV

      - name: Extract new_models and pr_number
        run: |
          NEW_MODELS=$(echo "$PLUGIN_INFO" | jq -r '.new_models')
          PR_NUMBER=$(echo "$PLUGIN_INFO" | jq -r '.pr_number')
          echo "NEW_MODELS=$NEW_MODELS" >> $GITHUB_ENV
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

      - name: Trigger Jenkins
        env:
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_USER_API: $${{ secrets.JENKINS_USER_API }}
          JENKINS_TOKEN: ${{ secrets.JENKINS_MAPPING_TOKEN }}
          JENKINS_TRIGGER: ${{ secrets.JENKINS_MAPPING_URL }}
          MODEL_LIST: ${{ env.NEW_MODELS }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
        run: |
          curl -X POST "$MAPPING_JENKINS_TRIGGER" \
            --user "$JENKINS_USER:$JENKINS_USER_API \
            --data-urlencode "NEW_MODELS=$NEW_MODELS" \
            --data-urlencode "PR_NUMBER=$PR_NUMBER" \
            --data-urlencode "TOKEN=$JENKINS_MAPPING_TOKEN
